// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ConfigZoneDao is the data access object for table config_zone.
type ConfigZoneDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns ConfigZoneColumns // columns contains all the column names of Table for convenient usage.
}

// ConfigZoneColumns defines and stores column names for table config_zone.
type ConfigZoneColumns struct {
	ZoneId           string // 区号
	GroupId          string //
	ZoneName         string // 区名称
	Host             string // 主机ip
	HostOut          string //
	WebsocketPort    string // websocket端口
	WebsocketPortOut string //
	HttpPort         string // http端口
	AdminPort        string // 管理接口端口
	AdminPortOut     string //
	Status           string // 状态(0、测试服 1、正式服)
	OpenTime         string // 开放时间
	MaxSize          string // 最大注册人数
	MaxOnlineSize    string // 最大在线人数
	OpenStatus       string // 0、新 1、热
	DisplayOrder     string //
}

// configZoneColumns holds the columns for table config_zone.
var configZoneColumns = ConfigZoneColumns{
	ZoneId:           "zone_id",
	GroupId:          "group_id",
	ZoneName:         "zone_name",
	Host:             "host",
	HostOut:          "host_out",
	WebsocketPort:    "websocket_port",
	WebsocketPortOut: "websocket_port_out",
	HttpPort:         "http_port",
	AdminPort:        "admin_port",
	AdminPortOut:     "admin_port_out",
	Status:           "status",
	OpenTime:         "open_time",
	MaxSize:          "max_size",
	MaxOnlineSize:    "max_online_size",
	OpenStatus:       "open_status",
	DisplayOrder:     "display_order",
}

// NewConfigZoneDao creates and returns a new DAO object for table data access.
func NewConfigZoneDao() *ConfigZoneDao {
	return &ConfigZoneDao{
		group:   "default",
		table:   "config_zone",
		columns: configZoneColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ConfigZoneDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ConfigZoneDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ConfigZoneDao) Columns() ConfigZoneColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ConfigZoneDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ConfigZoneDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the merror from function f if it returns non-nil merror.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ConfigZoneDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
