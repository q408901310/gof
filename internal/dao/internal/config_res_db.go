// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ConfigResDbDao is the data access object for table config_res_db.
type ConfigResDbDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns ConfigResDbColumns // columns contains all the column names of Table for convenient usage.
}

// ConfigResDbColumns defines and stores column names for table config_res_db.
type ConfigResDbColumns struct {
	ZoneId   string // 区id(引用mst_zone中的zone_id,0表示所有的区)
	UserName string // 资源库用户名
	Password string // 资源库密码
	Url      string // 连接字符串
	Driver   string // DB驱动程序
}

// configResDbColumns holds the columns for table config_res_db.
var configResDbColumns = ConfigResDbColumns{
	ZoneId:   "zone_id",
	UserName: "user_name",
	Password: "password",
	Url:      "url",
	Driver:   "driver",
}

// NewConfigResDbDao creates and returns a new DAO object for table data access.
func NewConfigResDbDao() *ConfigResDbDao {
	return &ConfigResDbDao{
		group:   "default",
		table:   "config_res_db",
		columns: configResDbColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ConfigResDbDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ConfigResDbDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ConfigResDbDao) Columns() ConfigResDbColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ConfigResDbDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ConfigResDbDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the merror from function f if it returns non-nil merror.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ConfigResDbDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
