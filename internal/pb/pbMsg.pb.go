// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol/pbMsg.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Msg struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Sequence             int32    `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Action               ACTION   `protobuf:"varint,3,opt,name=action,proto3,enum=pb.ACTION" json:"action,omitempty"`
	Code                 CODE     `protobuf:"varint,4,opt,name=code,proto3,enum=pb.CODE" json:"code,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	DataMsg              *DataMsg `protobuf:"bytes,6,opt,name=dataMsg,proto3" json:"dataMsg,omitempty"`
	Version              int32    `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	TestMode             bool     `protobuf:"varint,10,opt,name=testMode,proto3" json:"testMode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_209597918b002e16, []int{0}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *Msg) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Msg) GetAction() ACTION {
	if m != nil {
		return m.Action
	}
	return ACTION_PING
}

func (m *Msg) GetCode() CODE {
	if m != nil {
		return m.Code
	}
	return CODE_SUCCESS
}

func (m *Msg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Msg) GetDataMsg() *DataMsg {
	if m != nil {
		return m.DataMsg
	}
	return nil
}

func (m *Msg) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Msg) GetTestMode() bool {
	if m != nil {
		return m.TestMode
	}
	return false
}

func init() {
	proto.RegisterType((*Msg)(nil), "pb.Msg")
}

func init() { proto.RegisterFile("protocol/pbMsg.proto", fileDescriptor_209597918b002e16) }

var fileDescriptor_209597918b002e16 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0xbd, 0xfd, 0x9f, 0xdb, 0xe2, 0x22, 0xfe, 0x10, 0x86, 0x32, 0x84, 0x82, 0x90, 0xd5,
	0x14, 0xea, 0x13, 0x68, 0xeb, 0xa2, 0x8b, 0xb1, 0x10, 0x5c, 0xb9, 0x9b, 0x9f, 0x50, 0x06, 0x64,
	0x32, 0x4e, 0xa2, 0xcf, 0xe2, 0x23, 0xb9, 0xf4, 0x11, 0x64, 0x7c, 0x03, 0x9f, 0x40, 0x92, 0x99,
	0xc6, 0x5d, 0xce, 0x77, 0x6e, 0x92, 0x73, 0x0f, 0x5e, 0xd6, 0x8d, 0x32, 0x2a, 0x57, 0x2f, 0xeb,
	0x3a, 0x4b, 0xf4, 0x31, 0x76, 0x92, 0x0c, 0xea, 0x2c, 0xbc, 0xf6, 0x4e, 0x91, 0x9a, 0xd4, 0x7b,
	0xe1, 0x85, 0xe7, 0xb9, 0x2a, 0x64, 0x0f, 0xaf, 0x3c, 0x4c, 0x73, 0x53, 0xaa, 0xaa, 0xc3, 0xab,
	0x5f, 0xc0, 0x61, 0xa2, 0x8f, 0x64, 0x89, 0x81, 0x96, 0x5a, 0x97, 0xaa, 0xda, 0x17, 0x14, 0x18,
	0xf0, 0x40, 0xfc, 0x03, 0x12, 0xe2, 0x4c, 0xcb, 0xd7, 0x37, 0x59, 0xe5, 0x92, 0x0e, 0x18, 0xf0,
	0xb1, 0xf0, 0x9a, 0xac, 0x70, 0xd2, 0xbd, 0x48, 0x87, 0x0c, 0xf8, 0xf9, 0x06, 0xe3, 0x3a, 0x8b,
	0xef, 0xb6, 0x4f, 0xfb, 0xc3, 0xa3, 0xe8, 0x1d, 0xb2, 0xc4, 0x91, 0x8d, 0x42, 0x47, 0x6e, 0x62,
	0x66, 0x27, 0xb6, 0x87, 0xdd, 0x83, 0x70, 0x94, 0x10, 0x1c, 0xd9, 0x05, 0xe8, 0x98, 0x01, 0x5f,
	0x08, 0x77, 0x26, 0x37, 0x38, 0xed, 0x97, 0xa2, 0x13, 0x06, 0x7c, 0xbe, 0x99, 0xdb, 0x4b, 0xbb,
	0x0e, 0x89, 0x93, 0x47, 0x28, 0x4e, 0xdf, 0x65, 0x63, 0x53, 0xd2, 0xc0, 0xe5, 0x3a, 0x49, 0x1b,
	0xd9, 0x48, 0x6d, 0x12, 0xfb, 0x2d, 0x32, 0xe0, 0x33, 0xe1, 0xf5, 0x7d, 0xf4, 0xd9, 0x46, 0xf0,
	0xd5, 0x46, 0xf0, 0xdd, 0x46, 0xf0, 0xf1, 0x13, 0x9d, 0x3d, 0x2f, 0xd6, 0x65, 0x65, 0x64, 0x53,
	0xa5, 0xb6, 0xe5, 0x6c, 0xe2, 0xba, 0xb9, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x2b, 0x16,
	0x44, 0x7b, 0x01, 0x00, 0x00,
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TestMode {
		i--
		if m.TestMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Version != 0 {
		i = encodeVarintPbMsg(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x48
	}
	if m.DataMsg != nil {
		{
			size, err := m.DataMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPbMsg(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Code != 0 {
		i = encodeVarintPbMsg(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x20
	}
	if m.Action != 0 {
		i = encodeVarintPbMsg(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if m.Sequence != 0 {
		i = encodeVarintPbMsg(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintPbMsg(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPbMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovPbMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovPbMsg(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovPbMsg(uint64(m.Sequence))
	}
	if m.Action != 0 {
		n += 1 + sovPbMsg(uint64(m.Action))
	}
	if m.Code != 0 {
		n += 1 + sovPbMsg(uint64(m.Code))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbMsg(uint64(l))
	}
	if m.DataMsg != nil {
		l = m.DataMsg.Size()
		n += 1 + l + sovPbMsg(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovPbMsg(uint64(m.Version))
	}
	if m.TestMode {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPbMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPbMsg(x uint64) (n int) {
	return sovPbMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= ACTION(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPbMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataMsg == nil {
				m.DataMsg = &DataMsg{}
			}
			if err := m.DataMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestMode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPbMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPbMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPbMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPbMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPbMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPbMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPbMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPbMsg = fmt.Errorf("proto: unexpected end of group")
)
