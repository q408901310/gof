// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol/activity/ActivityFirstRechargeMsg.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ActivityFirstRechargeMsg struct {
	ResActivityId        int32    `protobuf:"varint,1,opt,name=resActivityId,proto3" json:"resActivityId,omitempty"`
	FirstRechargePrices  []int32  `protobuf:"varint,3,rep,packed,name=firstRechargePrices,proto3" json:"firstRechargePrices,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivityFirstRechargeMsg) Reset()         { *m = ActivityFirstRechargeMsg{} }
func (m *ActivityFirstRechargeMsg) String() string { return proto.CompactTextString(m) }
func (*ActivityFirstRechargeMsg) ProtoMessage()    {}
func (*ActivityFirstRechargeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f97f70cc82bec1e, []int{0}
}
func (m *ActivityFirstRechargeMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityFirstRechargeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityFirstRechargeMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityFirstRechargeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityFirstRechargeMsg.Merge(m, src)
}
func (m *ActivityFirstRechargeMsg) XXX_Size() int {
	return m.Size()
}
func (m *ActivityFirstRechargeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityFirstRechargeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityFirstRechargeMsg proto.InternalMessageInfo

func (m *ActivityFirstRechargeMsg) GetResActivityId() int32 {
	if m != nil {
		return m.ResActivityId
	}
	return 0
}

func (m *ActivityFirstRechargeMsg) GetFirstRechargePrices() []int32 {
	if m != nil {
		return m.FirstRechargePrices
	}
	return nil
}

func init() {
	proto.RegisterType((*ActivityFirstRechargeMsg)(nil), "pb.activity.ActivityFirstRechargeMsg")
}

func init() {
	proto.RegisterFile("protocol/activity/ActivityFirstRechargeMsg.proto", fileDescriptor_6f97f70cc82bec1e)
}

var fileDescriptor_6f97f70cc82bec1e = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x4f, 0x4c, 0x2e, 0xc9, 0x2c, 0xcb, 0x2c, 0xa9, 0xd4, 0x77, 0x84,
	0x32, 0xdc, 0x32, 0x8b, 0x8a, 0x4b, 0x82, 0x52, 0x93, 0x33, 0x12, 0x8b, 0xd2, 0x53, 0x7d, 0x8b,
	0xd3, 0xf5, 0xc0, 0x4a, 0x85, 0xb8, 0x0b, 0x92, 0xf4, 0x60, 0x6a, 0x95, 0x8a, 0xb8, 0x24, 0x70,
	0x29, 0x17, 0x52, 0xe1, 0xe2, 0x2d, 0x4a, 0x2d, 0x86, 0x49, 0x7b, 0xa6, 0x48, 0x30, 0x2a, 0x30,
	0x6a, 0xb0, 0x06, 0xa1, 0x0a, 0x0a, 0x19, 0x70, 0x09, 0xa7, 0x21, 0xeb, 0x0c, 0x28, 0xca, 0x4c,
	0x4e, 0x2d, 0x96, 0x60, 0x56, 0x60, 0xd6, 0x60, 0x0d, 0xc2, 0x26, 0xe5, 0x24, 0x77, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x10, 0xc5,
	0xa3, 0x9f, 0x99, 0x57, 0x92, 0x5a, 0x94, 0x97, 0x98, 0xa3, 0x5f, 0x90, 0x94, 0xc4, 0x06, 0x76,
	0xa7, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x08, 0x5b, 0x46, 0x16, 0xdb, 0x00, 0x00, 0x00,
}

func (m *ActivityFirstRechargeMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityFirstRechargeMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityFirstRechargeMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirstRechargePrices) > 0 {
		dAtA2 := make([]byte, len(m.FirstRechargePrices)*10)
		var j1 int
		for _, num1 := range m.FirstRechargePrices {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintActivityFirstRechargeMsg(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResActivityId != 0 {
		i = encodeVarintActivityFirstRechargeMsg(dAtA, i, uint64(m.ResActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintActivityFirstRechargeMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovActivityFirstRechargeMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActivityFirstRechargeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResActivityId != 0 {
		n += 1 + sovActivityFirstRechargeMsg(uint64(m.ResActivityId))
	}
	if len(m.FirstRechargePrices) > 0 {
		l = 0
		for _, e := range m.FirstRechargePrices {
			l += sovActivityFirstRechargeMsg(uint64(e))
		}
		n += 1 + sovActivityFirstRechargeMsg(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovActivityFirstRechargeMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActivityFirstRechargeMsg(x uint64) (n int) {
	return sovActivityFirstRechargeMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActivityFirstRechargeMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityFirstRechargeMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityFirstRechargeMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityFirstRechargeMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResActivityId", wireType)
			}
			m.ResActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityFirstRechargeMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResActivityId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityFirstRechargeMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FirstRechargePrices = append(m.FirstRechargePrices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityFirstRechargeMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityFirstRechargeMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityFirstRechargeMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FirstRechargePrices) == 0 {
					m.FirstRechargePrices = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityFirstRechargeMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FirstRechargePrices = append(m.FirstRechargePrices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstRechargePrices", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivityFirstRechargeMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityFirstRechargeMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActivityFirstRechargeMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActivityFirstRechargeMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityFirstRechargeMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityFirstRechargeMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActivityFirstRechargeMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActivityFirstRechargeMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActivityFirstRechargeMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActivityFirstRechargeMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActivityFirstRechargeMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActivityFirstRechargeMsg = fmt.Errorf("proto: unexpected end of group")
)
